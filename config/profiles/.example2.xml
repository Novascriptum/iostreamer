<?xml version="1.0" encoding="UTF-8"?>
<profile set-env="18">
    <foreach entity="docker-container"><!-- также тут можно передать имя итератора -->
        <!--
            Тэг tarball ниже, на самом деле, при своей инициализации не открывает tar-процесс,
            а открывает только последующую после него цепочку (сжатие, шифрование и отправки).
            И далее получает от дочерних классов обратные вызовы на добавление чего-либо (бинарных данных, которые они хотят отдать; информацию о том, какую папку локальной ситсемы добавить и пр.). Для этого чего-либо он открывает tar-процесс, который передаёт свой stdout в stdin порождённой ранее цепочки - и не закрывает этот tar (не записывает закрывающие заголовки).
            Таким образом он будет дописывать туда в единый архив все данные.
            Минус только в том, что tar будет работать только в php-режиме (и не сможет делегировать работу консольному tar, который быстрее)
            Вложенные tarball, теоретически, поддерживаются. Минус только в том, что вложенный tar будет формироваться потоково с неизвестным заранее размером (т.е. в виде N-штучных архивов). И в этом случае нужно продумать потребление памяти обоими процессами, чтобы оно не суммировалось (передал 512 Мб от дочернего процесса в родителя - получил 1 Гб)
        -->
        <tarball name="{{ container_name }}.tar.gz" compression="gzip" encryption="..." gateway="ftp">
            
        </tarball>
    </foreach>
</profile>
